dados_selecionados$Data <- as.Date(dados_selecionados$`DATA..YYYY.MM.DD.`, format = "%Y-%m-%d")
# Converter a coluna "PRECIPITAÇÃO TOTAL" para numérico
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` <- as.numeric(gsub(",", ".", dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`))
# Agregar os dados por data e encontrar o valor máximo de precipitação para cada dia
dados_agregados <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ Data, dados_selecionados, sum)
dias_acima_de_10mm_2023 <- dados_agregados[dados_agregados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` > 10, c("Data", "PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.")]
dados_acima_de_10mm <- rbind(dados_acima_de_10mm, dias_acima_de_10mm_2023)
# Criar o gráfico de barras para cada dia
plot_ly(dados_agregados, x = ~Data, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por dia') %>%
layout(title = "Precipitação diária",
xaxis = list(title = "Data"),
yaxis = list(title = "mm", range = c(0, 5)))
# Adicionar uma nova coluna para o mês e o ano
dados_agregados$AnoMes <- format(dados_agregados$Data, "%Y-%m")
# Agregar os dados por mês e encontrar o valor máximo de precipitação para cada mês
dados_agregados_mes <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ AnoMes, dados_agregados, sum)
# Criar o gráfico de barras para cada mês
plot_ly(dados_agregados_mes, x = ~AnoMes, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por mês') %>%
layout(title = "Precipitação mensal",
xaxis = list(title = "Mês"),
yaxis = list(title = "mm", range = c(0, 200)))
ano_especifico <- 2015
dados_Anuais <- adicionar_ano_dados_anuais(dados_agregados_mes, ano_especifico)
dados_AnuaisMes <- adicionarDadosMensais(dados_agregados_mes, dados_AnuaisMes)
dados <- read.csv('Dados/INMET_NE_RN_A316_CAICO_01-01-2014_A_31-12-2014.CSV', sep = ';', skip = 8, header = TRUE, fill = TRUE, na.strings = c("", "NA"), fileEncoding = "latin1")
# Selecionar as colunas "Data", "Hora UTC" e "PRECIPITAÇÃO TOTAL"
dados_selecionados <- dados[, c("DATA..YYYY.MM.DD.","HORA..UTC.","PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.")]
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`[dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` == '-9999'] <- 0
# Substituir NA por 0 na coluna "PRECIPITAÇÃO TOTAL"
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`[is.na(dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`)] <- 0
# Converter a coluna "Data" para o formato de data (com o novo formato)
dados_selecionados$Data <- as.Date(dados_selecionados$`DATA..YYYY.MM.DD.`, format = "%Y-%m-%d")
# Converter a coluna "PRECIPITAÇÃO TOTAL" para numérico
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` <- as.numeric(gsub(",", ".", dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`))
# Agregar os dados por data e encontrar o valor máximo de precipitação para cada dia
dados_agregados <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ Data, dados_selecionados, sum)
# Criar o gráfico de barras para cada dia
plot_ly(dados_agregados, x = ~Data, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por dia') %>%
layout(title = "Precipitação diária",
xaxis = list(title = "Data"),
yaxis = list(title = "mm", range = c(0, 5)))
dias_acima_de_10mm_2023 <- dados_agregados[dados_agregados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` > 10, c("Data", "PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.")]
dados_acima_de_10mm <- rbind(dados_acima_de_10mm, dias_acima_de_10mm_2023)
# Adicionar uma nova coluna para o mês e o ano
dados_agregados$AnoMes <- format(dados_agregados$Data, "%Y-%m")
# Agregar os dados por mês e encontrar o valor máximo de precipitação para cada mês
dados_agregados_mes <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ AnoMes, dados_agregados, sum)
# Criar o gráfico de barras para cada mês
plot_ly(dados_agregados_mes, x = ~AnoMes, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por mês') %>%
layout(title = "Precipitação mensal",
xaxis = list(title = "Mês"),
yaxis = list(title = "mm", range = c(0, 200)))
ano_especifico <- 2014
dados_Anuais <- adicionar_ano_dados_anuais(dados_agregados_mes, ano_especifico)
dados_AnuaisMes <- adicionarDadosMensais(dados_agregados_mes, dados_AnuaisMes)
dados <- read.csv('Dados/INMET_NE_RN_A316_CAICO_01-01-2013_A_31-12-2013.CSV', sep = ';', skip = 8, header = TRUE, fill = TRUE, na.strings = c("", "NA"), fileEncoding = "latin1")
# Selecionar as colunas "Data", "Hora UTC" e "PRECIPITAÇÃO TOTAL"
dados_selecionados <- dados[, c("DATA..YYYY.MM.DD.","HORA..UTC.","PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.")]
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`[dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` == '-9999'] <- 0
# Substituir NA por 0 na coluna "PRECIPITAÇÃO TOTAL"
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`[is.na(dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`)] <- 0
# Converter a coluna "Data" para o formato de data (com o novo formato)
dados_selecionados$Data <- as.Date(dados_selecionados$`DATA..YYYY.MM.DD.`, format = "%Y-%m-%d")
# Converter a coluna "PRECIPITAÇÃO TOTAL" para numérico
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` <- as.numeric(gsub(",", ".", dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`))
# Agregar os dados por data e encontrar o valor máximo de precipitação para cada dia
dados_agregados <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ Data, dados_selecionados, sum)
dias_acima_de_10mm_2023 <- dados_agregados[dados_agregados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` > 10, c("Data", "PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.")]
dados_acima_de_10mm <- rbind(dados_acima_de_10mm, dias_acima_de_10mm_2023)
# Criar o gráfico de barras para cada dia
plot_ly(dados_agregados, x = ~Data, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por dia') %>%
layout(title = "Precipitação diária",
xaxis = list(title = "Data"),
yaxis = list(title = "mm", range = c(0, 5)))
# Adicionar uma nova coluna para o mês e o ano
dados_agregados$AnoMes <- format(dados_agregados$Data, "%Y-%m")
# Agregar os dados por mês e encontrar o valor máximo de precipitação para cada mês
dados_agregados_mes <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ AnoMes, dados_agregados, sum)
# Criar o gráfico de barras para cada mês
plot_ly(dados_agregados_mes, x = ~AnoMes, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por mês') %>%
layout(title = "Precipitação mensal",
xaxis = list(title = "Mês"),
yaxis = list(title = "mm", range = c(0, 200)))
ano_especifico <- 2013
dados_Anuais <- adicionar_ano_dados_anuais(dados_agregados_mes, ano_especifico)
dados_AnuaisMes <- adicionarDadosMensais(dados_agregados_mes, dados_AnuaisMes)
dados <- read.csv('Dados/INMET_NE_RN_A316_CAICO_01-01-2012_A_31-12-2012.CSV', sep = ';', skip = 8, header = TRUE, fill = TRUE, na.strings = c("", "NA"), fileEncoding = "latin1")
# Selecionar as colunas "Data", "Hora UTC" e "PRECIPITAÇÃO TOTAL"
dados_selecionados <- dados[, c("DATA..YYYY.MM.DD.","HORA..UTC.","PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.")]
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`[dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` == '-9999'] <- 0
# Substituir NA por 0 na coluna "PRECIPITAÇÃO TOTAL"
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`[is.na(dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`)] <- 0
# Converter a coluna "Data" para o formato de data (com o novo formato)
dados_selecionados$Data <- as.Date(dados_selecionados$`DATA..YYYY.MM.DD.`, format = "%Y-%m-%d")
# Converter a coluna "PRECIPITAÇÃO TOTAL" para numérico
dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` <- as.numeric(gsub(",", ".", dados_selecionados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`))
# Agregar os dados por data e encontrar o valor máximo de precipitação para cada dia
dados_agregados <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ Data, dados_selecionados, sum)
dias_acima_de_10mm_2023 <- dados_agregados[dados_agregados$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` > 10, c("Data", "PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.")]
dados_acima_de_10mm <- rbind(dados_acima_de_10mm, dias_acima_de_10mm_2023)
# Criar o gráfico de barras para cada dia
plot_ly(dados_agregados, x = ~Data, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por dia') %>%
layout(title = "Precipitação diária",
xaxis = list(title = "Data"),
yaxis = list(title = "mm", range = c(0, 5)))
# Adicionar uma nova coluna para o mês e o ano
dados_agregados$AnoMes <- format(dados_agregados$Data, "%Y-%m")
# Agregar os dados por mês e encontrar o valor máximo de precipitação para cada mês
dados_agregados_mes <- aggregate(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ AnoMes, dados_agregados, sum)
# Criar o gráfico de barras para cada mês
plot_ly(dados_agregados_mes, x = ~AnoMes, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação por mês') %>%
layout(title = "Precipitação mensal",
xaxis = list(title = "Mês"),
yaxis = list(title = "mm", range = c(0, 200)))
ano_especifico <- 2012
dados_Anuais <- adicionar_ano_dados_anuais(dados_agregados_mes, ano_especifico)
dados_AnuaisMes <- adicionarDadosMensais(dados_agregados_mes, dados_AnuaisMes)
# Remover a primeira linha (com os rótulos 'Ano', 'PRECIPITAÇÃO.MEDIA', etc.)
dados_Anuais <- dados_Anuais[-1, ]
# Converter as colunas 'MediaAnual' e 'TotalAnual' para numérico
dados_Anuais$MediaAnual <- as.numeric(dados_Anuais$MediaAnual)
dados_Anuais$TotalAnual <- as.numeric(dados_Anuais$TotalAnual)
# Gráfico com barras para o TotalAnual e linha para a MediaAnual
grafico <- plot_ly(dados_Anuais, x = ~Ano, y = ~TotalAnual, type = 'bar', name = 'Total Anual') %>%
add_trace(y = ~MediaAnual, type = 'scatter', mode = 'lines', name = 'Média Anual') %>%
layout(title = "Total Anual e Média Anual",
xaxis = list(title = "Ano"),
yaxis = list(title = "mm"))
# Mostrar o gráfico
grafico
# Gráfico com barras para o TotalAnual e linha para a MediaAnual
# Removendo a linha de média anual e mantendo somente as barras com a média
grafico2 <- plot_ly(dados_Anuais, x = ~Ano, y = ~MediaAnual, type = 'bar', name = 'Média Anual') %>%
layout(title = "Média Anual de Precipitação de Jan-2012 até Nov-2023",
xaxis = list(title = "Ano"),
yaxis = list(title = "mm"))
# Mostrar o gráfico
grafico2
# Converter as colunas 'MediaAnual' e 'TotalAnual' para numérico
#dados_AnuaisMes$PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.<- as.numeric(dados_AnuaisMes$TotalAnual)
# Gráfico com barras para o TotalAnual e linha para a MediaAnual
# Convertendo a coluna AnoMes para formato de data (caso não esteja)
# Criar o gráfico com a coluna AnoMes ordenada
grafico <- plot_ly(dados_AnuaisMes, x = ~AnoMes, y = ~PRECIPITAÇÃO.TOTAL..HORÁRIO..mm., type = 'bar', name = 'Total Anual') %>%
layout(title = "Precipitação total para cada mês registrado",
xaxis = list(title = "Ano e mês", type = "category"),
yaxis = list(title = "mm"))
# Mostrar o gráfico
grafico
# Dicionário para mapear números de mês para nomes em português
meses_em_portugues <- c(
"Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
"Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
)
dados_AnuaisMes <- dados_AnuaisMes %>%
mutate(Mes = factor(substr(AnoMes, 6, 7), levels = sprintf("%02d", 1:12), labels = meses_em_portugues))
# Calcular a média por mês
media_por_mes <- aggregate(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm. ~ Mes, data = dados_AnuaisMes, FUN = mean)
# Calcular o total por mês
total_por_mes <- aggregate(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm. ~ Mes, data = dados_AnuaisMes, FUN = sum)
# Gráfico de média por mês com nomes em português
grafico_media <- plot_ly(media_por_mes, x = ~Mes, y = ~PRECIPITAÇÃO.TOTAL..HORÁRIO..mm., type = 'bar', name = 'Média por Mês') %>%
layout(title = "Média de precipitação por mês, dados de jan de 2012 até nov de 2023",
xaxis = list(title = "Mês"),
yaxis = list(title = "Média (mm)"))
# Gráfico de total por mês com nomes em português
grafico_total <- plot_ly(total_por_mes, x = ~Mes, y = ~PRECIPITAÇÃO.TOTAL..HORÁRIO..mm., type = 'bar', name = 'Total por Mês') %>%
layout(title = "Total de precipitação por mês/ Volume acumulado de jan de 2012 até nov 2023",
xaxis = list(title = "Mês"),
yaxis = list(title = "Total (mm)"))
# Arredondar os valores para terem apenas dois dígitos após a vírgula
media_por_mes_truncada <- round(media_por_mes$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, digits = 2)
# Criar a tabela com os valores arredondados e os nomes dos meses em português
tabela <- plot_ly(type = 'table',
header = list(
values = c("Mês", "Média do mês em mm"),
align = c("center", "center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = list(media_por_mes$Mes, media_por_mes_truncada),
align = c("center", "center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)) %>%
layout(title = "Precipitação Média por mês dados de jan de 2012 até nov de 2023")
# Mostrar a tabela
grafico_media
grafico_total
tabela
# Calcular o desvio padrão por mês
desvio_padrao_por_mes <- dados_AnuaisMes %>%
group_by(Mes) %>%
summarise(desvio_padrao = sd(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.))
# Criar o gráfico de barras para a média mensal de precipitação com linhas de desvio padrão e linha de tendência
grafico <- plot_ly(data = media_por_mes, x = ~Mes, y = ~media, type = 'bar', name = 'Precipitação (Média)') %>%
layout(title = "Precipitação Média e Desvio Padrão por mês",
xaxis = list(title = "Mês"),
yaxis = list(title = "Precipitação (mm)"))
# Adicionar linhas de desvio padrão ao gráfico
grafico_com_desvio <- add_trace(grafico, x = ~desvio_padrao_por_mes$Mes, y = ~desvio_padrao_por_mes$desvio_padrao,
name = 'Desvio Padrão', mode = 'lines', type = 'scatter', line = list(color = 'red'))
# Calcular a linha de tendência
tendencia <- lm(media ~ Mes, data = media_por_mes)
View(dados_acima_de_10mm)
tabela_dados_acima_de_10mm <- plot_ly(
data = dados_acima_de_10mm,
type = 'table',
header = list(values = names(dados_acima_de_10mm)),
cells = list(values = data.frame(dados_acima_de_10mm), align = "center")
)
# Exibir a tabela
tabela_dados_acima_de_10mm
head(dados_acima_de_10mm)
tabela_dados_acima_de_10mm <- plot_ly(
data = dados_acima_de_10mm,
type = 'table',
header = list(values = names(dados_acima_de_10mm)),
cells = list(values = list(dados_acima_de_10mm), align = "center")
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Criar um gráfico de tabela com os dados filtrados
tabela_dados_acima_de_10mm <- plot_ly(
data = dados_acima_de_10mm,
type = 'table',
header = list(values = names(dados_acima_de_10mm)),
cells = list(values = data.matrix(dados_acima_de_10mm), align = "center")
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Criar um gráfico de tabela com os dados filtrados
tabela_dados_acima_de_10mm <- plot_ly(
data = dados_acima_de_10mm,
type = 'table',
header = list(values = names(dados_acima_de_10mm)),
cells = list(values = list(dados_acima_de_10mm), align = "center"),
columnorder = c(1, 2)  # Ajusta a ordem das colunas
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Suponha que você já tem o dataframe dados_acima_de_10mm com os registros filtrados
# Criar uma tabela com os dados filtrados
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
header = list(
values = names(dados_acima_de_10mm),
align = c("center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = data.matrix(dados_acima_de_10mm),
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Suponha que você já tem o dataframe dados_acima_de_10mm com os registros filtrados
# Criar uma tabela com os dados filtrados
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
cells = list(
values = data.matrix(dados_acima_de_10mm),
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Suponha que você já tem o dataframe dados_acima_de_10mm com os registros filtrados
# Criar uma tabela com os dados filtrados
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
header = list(
values = names(dados_acima_de_10mm),
align = c("center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = (dados_acima_de_10mm),
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Suponha que você já tem o dataframe dados_acima_de_10mm com os registros filtrados
# Criar uma tabela com os dados filtrados
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
header = list(
values = names(dados_acima_de_10mm),
align = c("center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = dados_acima_de_10mm,
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Suponha que você já tem o dataframe dados_acima_de_10mm com os registros filtrados
# Criar uma tabela com os dados filtrados
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
header = list(
values = names(dados_acima_de_10mm),
align = c("center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = dados_acima_de_10mm$PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.,
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)
# Exibir a tabela
tabela_dados_acima_de_10mm
head(dados_acima_de_10mm)
# Converter os dados para uma lista de listas
dados_tabela <- lapply(1:nrow(dados_acima_de_10mm), function(i) {
list(dados_acima_de_10mm$Data[i], dados_acima_de_10mm$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`[i])
})
# Criar a tabela com os dados
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
header = list(
values = c("Data", "PRECIPITAÇÃO.TOTAL..HORÁRIO..mm."),
align = c("center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = dados_tabela,
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Suponha que você tem os dados em dados_acima_de_10mm
# Criar duas listas separadas para data e precipitação
datas <- dados_acima_de_10mm$Data
precipitacoes <- dados_acima_de_10mm$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`
# Criar uma tabela com as duas colunas
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
header = list(
values = c("Data", "PRECIPITAÇÃO.TOTAL..HORÁRIO..mm."),
align = c("center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = list(datas, precipitacoes),
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)
# Exibir a tabela
tabela_dados_acima_de_10mm
# Suponha que você tem os dados em dados_acima_de_10mm
# Criar duas listas separadas para data e precipitação
datas <- dados_acima_de_10mm$Data
precipitacoes <- dados_acima_de_10mm$`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`
# Criar uma tabela com as duas colunas
tabela_dados_acima_de_10mm <- plot_ly(
type = 'table',
header = list(
values = c("Data", "PRECIPITAÇÃO.TOTAL..HORÁRIO..mm."),
align = c("center"),
fill = list(color = "#9ddcff"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
),
cells = list(
values = list(datas, precipitacoes),
align = c("center"),
line = list(width = 1.5, color = 'black'),
font = list(family = "Helvetica", size = 12, color = "black")
)
)%>%
layout(title = "Tabela de Dados de Precipitação")
# Exibir a tabela
tabela_dados_acima_de_10mm
# Calcular o desvio padrão por mês
desvio_padrao_por_mes <- dados_AnuaisMes %>%
group_by(Mes) %>%
summarise(desvio_padrao = sd(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.))
# Criar o gráfico de barras para a média mensal de precipitação com linhas de desvio padrão e linha de tendência
grafico <- plot_ly(data = media_por_mes, x = ~Mes, y = ~media, type = 'bar', name = 'Precipitação (Média)') %>%
layout(title = "Precipitação Média e Desvio Padrão por mês",
xaxis = list(title = "Mês"),
yaxis = list(title = "Precipitação (mm)"))
# Adicionar linhas de desvio padrão ao gráfico
grafico_com_desvio <- add_trace(grafico, x = ~desvio_padrao_por_mes$Mes, y = ~desvio_padrao_por_mes$desvio_padrao,
name = 'Desvio Padrão', mode = 'lines', type = 'scatter', line = list(color = 'red'))
# Calcular a linha de tendência
tendencia <- lm(media ~ Mes, data = media_por_mes)
# Calcular o desvio padrão por mês
desvio_padrao_por_mes <- dados_AnuaisMes %>%
group_by(Mes) %>%
summarise(desvio_padrao = sd(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.))
# Criar o gráfico de barras para a média mensal de precipitação com linhas de desvio padrão e linha de tendência
grafico <- plot_ly(data = media_por_mes, x = ~Mes, y = ~media, type = 'bar', name = 'Precipitação (Média)') %>%
layout(title = "Precipitação Média e Desvio Padrão por mês",
xaxis = list(title = "Mês"),
yaxis = list(title = "Precipitação (mm)"))
# Adicionar linhas de desvio padrão ao gráfico
grafico_com_desvio <- add_trace(grafico, x = ~desvio_padrao_por_mes$Mes, y = ~desvio_padrao_por_mes$desvio_padrao,
name = 'Desvio Padrão', mode = 'lines', type = 'scatter', line = list(color = 'red'))
# Calcular a linha de tendência
#tendencia <- lm(media ~ Mes, data = media_por_mes)
tendencia_y <- predict(tendencia, newdata = data.frame(Mes = media_por_mes$Mes))
# Calcular o desvio padrão por mês
desvio_padrao_por_mes <- dados_AnuaisMes %>%
group_by(Mes) %>%
summarise(desvio_padrao = sd(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.))
# Criar o gráfico de barras para a média mensal de precipitação com linhas de desvio padrão e linha de tendência
grafico <- plot_ly(data = media_por_mes, x = ~Mes, y = ~media, type = 'bar', name = 'Precipitação (Média)') %>%
layout(title = "Precipitação Média e Desvio Padrão por mês",
xaxis = list(title = "Mês"),
yaxis = list(title = "Precipitação (mm)"))
# Adicionar linhas de desvio padrão ao gráfico
grafico_com_desvio <- add_trace(grafico, x = ~desvio_padrao_por_mes$Mes, y = ~desvio_padrao_por_mes$desvio_padrao,
name = 'Desvio Padrão', mode = 'lines', type = 'scatter', line = list(color = 'red'))
# Calcular a linha de tendência
tendencia <- lm(media ~ Mes, data = media_por_mes)
# Calcular o desvio padrão por mês
desvio_padrao_por_mes <- dados_AnuaisMes %>%
group_by(Mes) %>%
summarise(desvio_padrao = sd(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.))
# Criar o gráfico de barras para a média mensal de precipitação com linhas de desvio padrão e linha de tendência
grafico <- plot_ly(data = media_por_mes, x = ~Mes, y = ~media, type = 'bar', name = 'Precipitação (Média)') %>%
layout(title = "Precipitação Média e Desvio Padrão por mês",
xaxis = list(title = "Mês"),
yaxis = list(title = "Precipitação (mm)"))
# Adicionar linhas de desvio padrão ao gráfico
grafico_com_desvio <- add_trace(grafico, x = ~desvio_padrao_por_mes$Mes, y = ~desvio_padrao_por_mes$desvio_padrao,
name = 'Desvio Padrão', mode = 'lines', type = 'scatter', line = list(color = 'red'))
# Calcular a linha de tendência
tendencia <- lm(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm. ~ Mes, data = dados_AnuaisMes)
tendencia_y <- predict(tendencia, newdata = data.frame(Mes = media_por_mes$Mes))
# Adicionar linha de tendência ao gráfico
grafico_com_desvio <- add_trace(grafico_com_desvio, x = ~media_por_mes$Mes, y = tendencia_y,
name = 'Tendência', mode = 'lines', type = 'scatter', line = list(color = 'green'))
# Mostrar o gráfico
grafico_com_desvio
View(tendencia)
# Calcular o desvio padrão por mês
desvio_padrao_por_mes <- dados_AnuaisMes %>%
group_by(Mes) %>%
summarise(desvio_padrao = sd(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.))
# Criar o gráfico de barras para a média mensal de precipitação com linhas de desvio padrão e linha de tendência
grafico <- plot_ly(data = media_por_mes, x = ~Mes, y = ~media, type = 'bar', name = 'Precipitação (Média)') %>%
layout(title = "Precipitação Média e Desvio Padrão por mês",
xaxis = list(title = "Mês"),
yaxis = list(title = "Precipitação (mm)"))
# Adicionar linhas de desvio padrão ao gráfico
grafico_com_desvio <- add_trace(grafico, x = ~desvio_padrao_por_mes$Mes, y = ~desvio_padrao_por_mes$desvio_padrao,
name = 'Desvio Padrão', mode = 'lines', type = 'scatter', line = list(color = 'red'))
# Calcular a linha de tendência
tendencia <- lm(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm. ~ Mes, data = dados_AnuaisMes)
tendencia_y <- predict(tendencia, newdata = data.frame(Mes = media_por_mes$Mes))
# Adicionar linha de tendência ao gráfico
grafico_com_desvio <- add_trace(grafico_com_desvio, x = ~media_por_mes$Mes, y = tendencia_y,
name = 'Tendência', mode = 'lines', type = 'scatter', line = list(color = 'green'))
# Mostrar o gráfico
grafico_com_desvio
media_por_mes
# Calcular o desvio padrão por mês
desvio_padrao_por_mes <- dados_AnuaisMes %>%
group_by(Mes) %>%
summarise(desvio_padrao = sd(PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.))
# Criar o gráfico de barras para a média mensal de precipitação com linhas de desvio padrão e linha de tendência
grafico <- plot_ly(data = media_por_mes, x = ~Mes, y = ~`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.`, type = 'bar', name = 'Precipitação (Média)') %>%
layout(title = "Precipitação Média e Desvio Padrão por mês",
xaxis = list(title = "Mês"),
yaxis = list(title = "Precipitação (mm)"))
# Adicionar linhas de desvio padrão ao gráfico
grafico_com_desvio <- add_trace(grafico, x = ~desvio_padrao_por_mes$Mes, y = ~desvio_padrao_por_mes$desvio_padrao,
name = 'Desvio Padrão', mode = 'lines', type = 'scatter', line = list(color = 'red'))
# Calcular a linha de tendência
tendencia <- lm(`PRECIPITAÇÃO.TOTAL..HORÁRIO..mm.` ~ Mes, data = media_por_mes)
tendencia_y <- predict(tendencia, newdata = media_por_mes)
# Adicionar linha de tendência ao gráfico
grafico_com_desvio <- add_trace(grafico_com_desvio, x = ~media_por_mes$Mes, y = tendencia_y,
name = 'Tendência', mode = 'lines', type = 'scatter', line = list(color = 'green'))
# Mostrar o gráfico
grafico_com_desvio
